name: Next.js CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  NEXT_PUBLIC_APP_NAME: ${{ secrets.NEXT_PUBLIC_APP_NAME }}

jobs:
  # Stage 1: Code Quality & Security
  quality-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Type checking
        run: pnpm type-check

      - name: Build Design Tokens
        run: pnpm tokens:build

      - name: Verify Token Build
        run: |
          if [ ! -f "src/styles/tokens/variables.css" ]; then
            echo "Token build failed - variables.css not generated"
            exit 1
          fi

      - name: Lint checking
        run: pnpm lint

      - name: Code formatting check
        run: pnpm format:check

      - name: Dependency cycle check
        run: pnpm depcheck

      - name: Security audit
        run: pnpm audit --audit-level high

  # Stage 2: Build & Test
  build-and-test:
    needs: quality-check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Run ${{ matrix.test-type }} tests
        run: pnpm test:${{ matrix.test-type }}

      - name: Collect test results for dashboard
        run: |
          # Generate JSON output for unit tests
          pnpm test:unit --json --outputFile=test-results-unit.json --silent || true
          # Generate JSON output for integration tests  
          pnpm test:integration --json --outputFile=test-results-integration.json --silent || true
          # Run E2E tests and generate results
          pnpm test:e2e --reporter=json --output-file=e2e-results.json || true
        continue-on-error: true

      - name: Update dashboard with test results
        run: |
          # Run test result collection and dashboard update
          node test-result-collector.js
          # Copy enhanced dashboard to main dashboard location
          cp enhanced-dashboard.html frontend-testing-dashboard.html || true
        continue-on-error: true

      - name: Upload test results and dashboard
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-and-dashboard-${{ matrix.test-type }}
          path: |
            coverage/
            frontend-testing-dashboard.html
            enhanced-dashboard.html
            test-results-summary.json
            test-results-unit.json
            test-results-integration.json
            e2e-results.json

  # Stage 3: Security Scanning
  security-scan:
    needs: quality-check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # - name: Run Snyk security scan
      #   uses: snyk/actions/node@master
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   if: env.SNYK_TOKEN != ''
      #   continue-on-error: true

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: SAST Security Scan
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        if: always() && hashFiles('results.sarif') != ''
        with:
          sarif_file: results.sarif

  # Stage 4: Performance Testing (Temporarily Disabled)
  # performance-test:
  #   needs: build-and-test
  #   runs-on: ubuntu-latest
  #   if: github.event_name == 'pull_request'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}
  #         cache: 'npm'
  #
  #     - name: Install dependencies
  #       run: npm ci
  #
  #     - name: Build application
  #       run: npm run build
  #
  #     - name: Run Lighthouse CI
  #       uses: treosh/lighthouse-ci-action@v10
  #       with:
  #         configPath: '.lighthouserc.json'
  #         uploadArtifacts: true
  #         temporaryPublicStorage: true
  #
  # NOTE: Performance test temporarily disabled due to Lighthouse CI accessibility assertion issues
  # To re-enable: uncomment the above job and ensure Lighthouse CI configuration is working properly

  # Stage 5: Deploy (Placeholder)
  deploy:
    needs: [build-and-test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel (Placeholder)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Update deployment status
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: success
          deployment-id: ${{ steps.deploy.outputs.deployment-id }}
